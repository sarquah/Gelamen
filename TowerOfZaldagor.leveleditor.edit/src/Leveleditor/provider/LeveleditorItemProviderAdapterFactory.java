/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package Leveleditor.provider;

import Leveleditor.util.LeveleditorAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class LeveleditorItemProviderAdapterFactory extends LeveleditorAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public LeveleditorItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link Leveleditor.Act} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActItemProvider actItemProvider;

	/**
	 * This creates an adapter for a {@link Leveleditor.Act}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActAdapter() {
		if (actItemProvider == null) {
			actItemProvider = new ActItemProvider(this);
		}

		return actItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Leveleditor.NPC} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NPCItemProvider npcItemProvider;

	/**
	 * This creates an adapter for a {@link Leveleditor.NPC}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNPCAdapter() {
		if (npcItemProvider == null) {
			npcItemProvider = new NPCItemProvider(this);
		}

		return npcItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Leveleditor.Key} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected KeyItemProvider keyItemProvider;

	/**
	 * This creates an adapter for a {@link Leveleditor.Key}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createKeyAdapter() {
		if (keyItemProvider == null) {
			keyItemProvider = new KeyItemProvider(this);
		}

		return keyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Leveleditor.EventRoom} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EventRoomItemProvider eventRoomItemProvider;

	/**
	 * This creates an adapter for a {@link Leveleditor.EventRoom}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEventRoomAdapter() {
		if (eventRoomItemProvider == null) {
			eventRoomItemProvider = new EventRoomItemProvider(this);
		}

		return eventRoomItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Leveleditor.RoomEvent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RoomEventItemProvider roomEventItemProvider;

	/**
	 * This creates an adapter for a {@link Leveleditor.RoomEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRoomEventAdapter() {
		if (roomEventItemProvider == null) {
			roomEventItemProvider = new RoomEventItemProvider(this);
		}

		return roomEventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Leveleditor.Trap} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TrapItemProvider trapItemProvider;

	/**
	 * This creates an adapter for a {@link Leveleditor.Trap}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTrapAdapter() {
		if (trapItemProvider == null) {
			trapItemProvider = new TrapItemProvider(this);
		}

		return trapItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Leveleditor.Enemy} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnemyItemProvider enemyItemProvider;

	/**
	 * This creates an adapter for a {@link Leveleditor.Enemy}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEnemyAdapter() {
		if (enemyItemProvider == null) {
			enemyItemProvider = new EnemyItemProvider(this);
		}

		return enemyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Leveleditor.DialogController} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DialogControllerItemProvider dialogControllerItemProvider;

	/**
	 * This creates an adapter for a {@link Leveleditor.DialogController}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDialogControllerAdapter() {
		if (dialogControllerItemProvider == null) {
			dialogControllerItemProvider = new DialogControllerItemProvider(this);
		}

		return dialogControllerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Leveleditor.DialogChoices} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DialogChoicesItemProvider dialogChoicesItemProvider;

	/**
	 * This creates an adapter for a {@link Leveleditor.DialogChoices}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDialogChoicesAdapter() {
		if (dialogChoicesItemProvider == null) {
			dialogChoicesItemProvider = new DialogChoicesItemProvider(this);
		}

		return dialogChoicesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Leveleditor.Dialog} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DialogItemProvider dialogItemProvider;

	/**
	 * This creates an adapter for a {@link Leveleditor.Dialog}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDialogAdapter() {
		if (dialogItemProvider == null) {
			dialogItemProvider = new DialogItemProvider(this);
		}

		return dialogItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Leveleditor.DialogSkillTest} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DialogSkillTestItemProvider dialogSkillTestItemProvider;

	/**
	 * This creates an adapter for a {@link Leveleditor.DialogSkillTest}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDialogSkillTestAdapter() {
		if (dialogSkillTestItemProvider == null) {
			dialogSkillTestItemProvider = new DialogSkillTestItemProvider(this);
		}

		return dialogSkillTestItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Leveleditor.Gold} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GoldItemProvider goldItemProvider;

	/**
	 * This creates an adapter for a {@link Leveleditor.Gold}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGoldAdapter() {
		if (goldItemProvider == null) {
			goldItemProvider = new GoldItemProvider(this);
		}

		return goldItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Leveleditor.Potion} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PotionItemProvider potionItemProvider;

	/**
	 * This creates an adapter for a {@link Leveleditor.Potion}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPotionAdapter() {
		if (potionItemProvider == null) {
			potionItemProvider = new PotionItemProvider(this);
		}

		return potionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Leveleditor.Weapon} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WeaponItemProvider weaponItemProvider;

	/**
	 * This creates an adapter for a {@link Leveleditor.Weapon}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWeaponAdapter() {
		if (weaponItemProvider == null) {
			weaponItemProvider = new WeaponItemProvider(this);
		}

		return weaponItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Leveleditor.Armor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArmorItemProvider armorItemProvider;

	/**
	 * This creates an adapter for a {@link Leveleditor.Armor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArmorAdapter() {
		if (armorItemProvider == null) {
			armorItemProvider = new ArmorItemProvider(this);
		}

		return armorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Leveleditor.FinalRoom} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FinalRoomItemProvider finalRoomItemProvider;

	/**
	 * This creates an adapter for a {@link Leveleditor.FinalRoom}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFinalRoomAdapter() {
		if (finalRoomItemProvider == null) {
			finalRoomItemProvider = new FinalRoomItemProvider(this);
		}

		return finalRoomItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Leveleditor.Quest} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QuestItemProvider questItemProvider;

	/**
	 * This creates an adapter for a {@link Leveleditor.Quest}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQuestAdapter() {
		if (questItemProvider == null) {
			questItemProvider = new QuestItemProvider(this);
		}

		return questItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Leveleditor.Accessory} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AccessoryItemProvider accessoryItemProvider;

	/**
	 * This creates an adapter for a {@link Leveleditor.Accessory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAccessoryAdapter() {
		if (accessoryItemProvider == null) {
			accessoryItemProvider = new AccessoryItemProvider(this);
		}

		return accessoryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Leveleditor.Aura} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AuraItemProvider auraItemProvider;

	/**
	 * This creates an adapter for a {@link Leveleditor.Aura}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAuraAdapter() {
		if (auraItemProvider == null) {
			auraItemProvider = new AuraItemProvider(this);
		}

		return auraItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (actItemProvider != null) actItemProvider.dispose();
		if (npcItemProvider != null) npcItemProvider.dispose();
		if (keyItemProvider != null) keyItemProvider.dispose();
		if (eventRoomItemProvider != null) eventRoomItemProvider.dispose();
		if (roomEventItemProvider != null) roomEventItemProvider.dispose();
		if (trapItemProvider != null) trapItemProvider.dispose();
		if (enemyItemProvider != null) enemyItemProvider.dispose();
		if (dialogControllerItemProvider != null) dialogControllerItemProvider.dispose();
		if (dialogChoicesItemProvider != null) dialogChoicesItemProvider.dispose();
		if (dialogItemProvider != null) dialogItemProvider.dispose();
		if (dialogSkillTestItemProvider != null) dialogSkillTestItemProvider.dispose();
		if (goldItemProvider != null) goldItemProvider.dispose();
		if (potionItemProvider != null) potionItemProvider.dispose();
		if (weaponItemProvider != null) weaponItemProvider.dispose();
		if (armorItemProvider != null) armorItemProvider.dispose();
		if (finalRoomItemProvider != null) finalRoomItemProvider.dispose();
		if (questItemProvider != null) questItemProvider.dispose();
		if (accessoryItemProvider != null) accessoryItemProvider.dispose();
		if (auraItemProvider != null) auraItemProvider.dispose();
	}

}
